options {
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  VISITOR_DATA_TYPE="StringBuilder";
  VISITOR_RETURN_TYPE="void";
}
PARSER_BEGIN(DemoParser)
package io.leaderli.c1;
import java.io.StringReader;
public class DemoParser{
    public static void main(String[] args) throws Exception {
      DemoParser demo = new DemoParser(new StringReader("aa"));
      SimpleNode node = demo.Start();
      node.dump(" ");
      demo = new DemoParser(new StringReader("aa#"));
      node = demo.Start();
      node.dump(" ");
      demo = new DemoParser(new StringReader("aa##wav:12345##1111#11##wav:22345####break##bb"));
      node = demo.Start();
      node.dump(" ");
      DemoParserDefaultVisitor demoParserDefaultVisitor = new DemoParserDefaultVisitor();
      StringBuilder sb = new StringBuilder();
      demoParserDefaultVisitor.visit(node, sb);
      System.out.println(sb);
    }
 }
PARSER_END(DemoParser)

<DEFAULT>
TOKEN : {
    <D_TTS: (~["#"])+>|
    <D_TAG: "#">:TAG_BEGIN
}
<TAG_BEGIN>
TOKEN : {
    <B_TTS: (~["#"])+>:DEFAULT|
    <B_TAG: "#">:TAG_STATE
}

<TAG_STATE>
TOKEN : {
    <WAV: "wav"> |
    <BREAK: "break"> |
    <COMMA: ":"> |
    <DIGITS: (["0"-"9"])+>|
    <T_TAG: "##"> :DEFAULT
}

SimpleNode Start() :{}{
    (tts()) +<EOF>{
        return jjtThis;
    }
}
void wav():{Token t;}{
    <WAV>
    <COMMA>
    t=<DIGITS>{jjtThis.jjtSetValue(t.image);}
}
void tts() #void:{Token t;}{
    t= <D_TTS>{jjtThis.jjtSetValue(t.image);}#tts
    |
    <D_TAG>[t=<B_TTS>{jjtThis.jjtSetValue("#"+t.image);return;}#tts|tag(){return ;}]
    {
       jjtThis.jjtSetValue("#");
    }#tts
}

void  _break():{}{
    <BREAK>
}

void  tag()#void:{Token t;}{
     <B_TAG>
     (wav()|_break())
     <T_TAG>
}

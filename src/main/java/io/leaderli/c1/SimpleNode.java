/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package io.leaderli.c1;

public abstract class SimpleNode implements Node {

    protected Node parent;
    protected Node[] children;
    protected int id;
    protected Object value;
    protected DemoParser parser;

    public SimpleNode(DemoParser p, int i) {
        this(i);
        parser = p;
    }

    public SimpleNode(int i) {
        id = i;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node[] c = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    public int getId() {
        return id;
    }

    public void jjtSetValue(Object value) {
        this.value = value;
    }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

    public Object jjtGetValue() {
        return value;
    }

    public String toString() {
        return value == null ? DemoParserTreeConstants.jjtNodeName[id] : value + "";
    }

  /* Override this method if you want to customize how the node dumps
     out its children. */

    public String toString(String prefix) {
        return prefix + this;
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix));
        if (children != null) {
            for (Node child : children) {
                SimpleNode n = (SimpleNode) child;
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    public void childrenAccept(DemoParserDefaultVisitor demoParserDefaultVisitor, Integer data) {
    }
}

/* JavaCC - OriginalChecksum=b5bb426ceb9194939e3125e3af35c989 (do not edit this line) */

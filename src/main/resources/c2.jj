/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. c2.jj */
/*@egen*/options {
  STATIC = false;
               
}

PARSER_BEGIN(DemoParser)
package io.leaderli.c1;
import java.io.StringReader;public class DemoParser/*@bgen(jjtree)*/implements DemoParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTDemoParserState jjtree = new JJTDemoParserState();

/*@egen*/

    public static void main(String[] args) throws Exception {
        String input = "1+2-3+4*5-12/6";
        System.out.println(input);
        DemoParser parser = new DemoParser(new StringReader(input));
        SimpleNode start = parser.Start();
        start.dump("");
        parser = new DemoParser(System.in);
        start = parser.Start();
        start.dump("");
    }
}
PARSER_END  (DemoParser)
SKIP : {" "}
TOKEN : {
    <EOL: "\r"|"\n"|"\r\n">|
    <PLUS: "+"> |
    <MINUS: "-"> |
    <TIMES: "*"> |
    <DIVIDE: "/"> |
    <OPEN_PAR: "("> |
    <CLOSE_PAR: ")"> |
    <NUMBER: <DIGITS>|<DIGITS>"."<DIGITS>> |
    <#DIGITS: (["0"-"9"])+>
}

/* grammar rules */



void plus():{/*@bgen(jjtree) plus */
  ASTplus jjtn000 = new ASTplus(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) plus */
                try {
/*@egen*/ <PLUS>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.jjtSetValue("+");}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/}
void minus():{/*@bgen(jjtree) minus */
  ASTminus jjtn000 = new ASTminus(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) minus */
                 try {
/*@egen*/ <MINUS>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.jjtSetValue("-");}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void times():{/*@bgen(jjtree) times */
  ASTtimes jjtn000 = new ASTtimes(JJTTIMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) times */
                 try {
/*@egen*/ <TIMES>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.jjtSetValue("*");}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void divide():{/*@bgen(jjtree) divide */
  ASTdivide jjtn000 = new ASTdivide(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) divide */
                  try {
/*@egen*/ <DIVIDE>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.jjtSetValue("/");}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void negative():{/*@bgen(jjtree) negative */
  ASTnegative jjtn000 = new ASTnegative(JJTNEGATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) negative */
                    try {
/*@egen*/ <MINUS>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.jjtSetValue("~");}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/}

SimpleNode Start() :{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expr()       :{ }
{
    (
        term() (/*@bgen(jjtree) expr */
                 {
                   ASTexpr jjtn001 = new ASTexpr(JJTEXPR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ ((plus() |minus()) term())/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/      )*
    )
}
void term()      :{}{
    (
        primary()(/*@bgen(jjtree) term */
                  {
                    ASTterm jjtn001 = new ASTterm(JJTTERM);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/((times()|divide()) primary())/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/     )*
    )
}


void primary() :{/*@bgen(jjtree) primary */
                  ASTprimary jjtn000 = new ASTprimary(JJTPRIMARY);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) primary */
  try {
/*@egen*/
  t=<NUMBER>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }
|
  <OPEN_PAR>expr() <CLOSE_PAR>
|
  negative()primary()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
options {
  STATIC = false;
}

PARSER_BEGIN(DemoParser)
package io.leaderli.c1;
import java.io.StringReader;public class DemoParser {

    public static void main(String[] args) throws Exception {
        String input = "1+2-3+4*5-12/6";
        System.out.println(input);
        DemoParser parser = new DemoParser(new StringReader(input));
        SimpleNode start = parser.Start();
        start.dump("");
    }
}
PARSER_END  (DemoParser)
SKIP : {" "}
TOKEN : {
    <EOL: "\r"|"\n"|"\r\n">|
    <PLUS: "+"> |
    <MINUS: "-"> |
    <TIMES: "*"> |
    <DIVIDE: "/"> |
    <OPEN_PAR: "("> |
    <CLOSE_PAR: ")"> |
    <NUMBER: <DIGITS>|<DIGITS>"."<DIGITS>> |
    <#DIGITS: (["0"-"9"])+>
}

/* grammar rules */



void plus():{}{ <PLUS>{jjtThis.jjtSetValue("+");}}
void minus():{}{ <MINUS>{jjtThis.jjtSetValue("-");}}
void times():{}{ <TIMES>{jjtThis.jjtSetValue("*");}}
void divide():{}{ <DIVIDE>{jjtThis.jjtSetValue("/");}}
void negative():{}{ <MINUS>{jjtThis.jjtSetValue("~");}}

SimpleNode Start() :{}
{
    expr()
    {
        return jjtThis;
    }
}

void expr()  :{ }
{
    (
        term() ( (plus() |minus()) term())*
    )   #expr(>1)
}
void term() :{}{
    (
        primary()((times()|divide()) primary())*
    )   #term(>1)
}


void primary() :{ Token t; }
{
  t=<NUMBER> { jjtThis.jjtSetValue(t.image); }
|
  <OPEN_PAR>expr() <CLOSE_PAR>
|
  negative()primary()
}
